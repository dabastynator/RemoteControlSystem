package de.newsystem.rmi.client;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

import de.newsystem.rmi.protokol.Reply;
import de.newsystem.rmi.protokol.Request;

public class DynamicProxy implements InvocationHandler{

	private String objectName;
	private ObjectOutputStream out;
	private ObjectInputStream in;


	public DynamicProxy(String objectName, ObjectInputStream in,
			ObjectOutputStream out) {
		this.objectName = objectName;
		this.in = in;
		this.out = out;
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args)
			throws Throwable {
		Request request = new Request();
		request.setObject(objectName);
		request.setMethod(method.getName());
		request.setParams(args);
		out.writeObject(request);
		Object obj = in.readObject();
		Reply reply = (Reply) obj;
		if (reply.getError() == null){
			if (reply.getReturnType() != null && reply.getNewId() != null){
				return Factory.instance().createProxy(reply.getNewId(), (Class) reply.getReturnType());
			}
			return reply.getResult();
		}
		throw reply.getError();
	}

}
