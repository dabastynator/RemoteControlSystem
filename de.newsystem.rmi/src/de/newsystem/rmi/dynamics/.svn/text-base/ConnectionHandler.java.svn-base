package de.newsystem.rmi.server;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.HashMap;

import de.newsystem.rmi.protokol.RemoteAble;
import de.newsystem.rmi.protokol.Reply;
import de.newsystem.rmi.protokol.Request;

public class ConnectionHandler {

	public static int idCounter = 0;

	private ObjectOutputStream out;
	private ObjectInputStream in;
	private HashMap<String, DynamicAdapter> objectMap;

	public ConnectionHandler(HashMap<String, DynamicAdapter> adapters,
			Socket socket) throws IOException {
		objectMap = adapters;
		out = new ObjectOutputStream(socket.getOutputStream());
		in = new ObjectInputStream(socket.getInputStream());
	}

	public void handle() {
		System.out.println("client connection started");
		try {
			while (true) {
				Object object = in.readObject();
				Request request = (Request) object;
				DynamicAdapter adapter = objectMap.get(request.getObject());
				if (adapter != null) {
					Reply reply = adapter.performeRequest(request);
					if (reply.getResult() instanceof RemoteAble) {
						DynamicAdapter dynamicAdapter = new DynamicAdapter(
								reply.getResult());
						String id = "newsystem.result.id" + (++idCounter);
						objectMap.put(id, dynamicAdapter);
						reply.setNewId(id);
						reply.setResult(null);
					}
					out.writeObject(reply);
				}
			}
		} catch (IOException e) {
			if (e instanceof EOFException)
				System.out.println("client connection closed");
			else
				e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

}
